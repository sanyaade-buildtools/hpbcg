import java.util.*;


class InstructionsList
{
    String archName;
    int isaLen;
    Vector instructionList;
    Instruction currentInstruction;
    public InstructionsList (String archName, int isaLen)
    {
	this.archName = archName;
	this.isaLen = isaLen;
	instructionList = new Vector();
    }
    public String toString()
    {
	String tmp = archName+" : "+isaLen+" bits"+"\n";
	tmp += "/* Autogenerated file, do not edit ! */"+"\n";
	tmp += "/* "+ archName +" "+ isaLen+ " bits  */"+"\n";
	tmp += "#include <hpbcg-"+archName+"-utils.h>"+"\n";
	for (int i = 0; i < instructionList.size(); ++i)
	    {
		tmp += instructionList.elementAt(i)+"\n";
	    }
	return tmp;
    } /* toString() */
    void addInstruction()
    {
	instructionList.add (currentInstruction);
	currentInstruction = null;
    } /* addInstruction */

    void addName(String insnName)
    {
	if (null == currentInstruction) 
	    currentInstruction = new Instruction();
	currentInstruction.setName(insnName);
    } /* addName */

    void addBinaryNumber(String n)
    {
	if (null == currentInstruction) 
	    currentInstruction = new Instruction();
	currentInstruction.addBinaryNumber(Integer.parseInt(n, 2), n.length());
    } /* addBinaryNumber */

    void addBinaryIntDescr(String n)
    {
	if (null == currentInstruction) 
	    currentInstruction = new Instruction();
	currentInstruction.addBinaryIntDescr(n);
    } /* addBinaryIntDescr */

    void addBinaryRegDescr(String n)
    {
	if (null == currentInstruction) 
	    currentInstruction = new Instruction();
	currentInstruction.addBinaryRegDescr(n);
    } /* addBinaryRegDescr */
   
    void addAsmReg(String r)
    {
	currentInstruction.addAsmReg(r);
    } /* addAsmReg */
    void addAsmInt(String r)
    {
	currentInstruction.addAsmInt(r);
    } /* addAsmInt */
}