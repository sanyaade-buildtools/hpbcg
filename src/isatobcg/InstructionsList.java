import java.util.*;

class InstructionsList
{
    String archName;
    int isaLen;
    Vector instructionList = new Vector();
    Instruction cI;
    public void setNameAndLenght (String archName, int isaLen)
    {
	this.archName = archName;
	this.isaLen = isaLen;
    }
    String header()
    {

	StringBuffer tmp = new StringBuffer("/* Autogenerated file, do not edit ! */\n");
	tmp.append("/* "+ archName +" "+ isaLen+ " bits  */\n");
	tmp.append("#include <hpbcg-"+archName+"-utils.h>\n");
	return tmp.toString();
    } /* header */

    public String toString()
    {
	StringBuffer tmp = new StringBuffer(header());
	tmp.append("#if WITH_HPBCG_FUNCTIONS\n");
	for (int i = 0; i < instructionList.size(); ++i)
	    tmp.append(((Instruction) instructionList.elementAt(i)).toMacro());
	tmp.append("#else /* WITH_HPBCG_FUNCTIONS */\n");
	for (int i = 0; i < instructionList.size(); ++i)
	    tmp.append(((Instruction) instructionList.elementAt(i)).toFunction());
	tmp.append("#endif /* WITH_HPBCG_FUNCTIONS */\n");
	return tmp.toString();
    } /* toString() */

    String getInsnList()
    {
	String tmp = "";

	for (int i = 0; i < instructionList.size(); ++i)
	    tmp += ((Instruction) instructionList.elementAt(i)).getName()+ "\n";
	return tmp;

    } /* getInsnList */

    public void Verify()
    {
	if (null == cI) 
	    cI = new Instruction(archName);
    }

    void addInstruction()
    {
	instructionList.add (cI);
	cI = null;
    } /* addInstruction */
    void addName(String insnName)
    {
	cI.setName(insnName);
    } /* addName */

    void addBinaryNumber(String n)
    {
	Verify();
	cI.addBinaryNumber(Integer.parseInt(n, 2), n.length());
    } /* addBinaryNumber */

    void addBinaryIntExpr (String n)
    {
	int i; 
	String expr = "", intEnd = "" , intStart = "";;
	Verify();

	for (i = 1; ')' != n.charAt(i) ; ++i)
	    expr += n.charAt(i);
	// Pass ")_" 
	for (i+= 2; '-' != n.charAt(i) ; ++i)
	    intEnd += n.charAt(i);
	for (i++; i < n.length(); ++i)
	    intStart += n.charAt(i);
	cI.addBinaryIntExpr(expr, Integer.parseInt(intStart), 
			    Integer.parseInt(intEnd));
    }
    void addBinaryIntDescr(String n)
    {
	int i;
	String intNumber = "", intEnd = "" , intStart = "";
	Verify();
	// Number has this form iN_E-S
	try {
	    for (i = 1; '_' != n.charAt(i) ; ++i) intNumber += n.charAt(i);
	    for (i++; '-' != n.charAt(i) ; ++i)   intEnd += n.charAt(i);
	    for (; i < n.length(); ++i)		  intStart += n.charAt(i);
	    cI.addBinaryIntDescr(Integer.parseInt(intNumber), 
				 Integer.parseInt(intStart), 
				 Integer.parseInt(intEnd));
	}
	catch (java.lang.StringIndexOutOfBoundsException e)
	    {
	cI.addBinaryIntDescr(Integer.parseInt(intNumber), 
		       0 ,Integer.parseInt(intEnd));

	    }
    } /* addBinaryIntDescr */

    void addBinaryRegDescr(String descr)
    {
	int i;
	String letter;
	String number = "", size = "";
	Verify();
	// L I1 _ I2
	letter = ""+ descr.charAt(0);
	for (i = 1; '_' != descr.charAt(i) ; ++i)
		number += descr.charAt(i);
	for (i++; i < descr.length(); ++i)
		size += descr.charAt(i);
	cI.addBinaryRegDescr(letter, Integer.parseInt (number), Integer.parseInt (size));
    } /* addBinaryRegDescr */

    void addAsmReg(String r)
    {
	cI.addAsmReg(r);
    } /* addAsmReg */

    void addAsmInt(String r)
    {
	cI.addAsmInt(r);
    } /* addAsmInt */
}