#include <stdio.h>  /* -*- c -*- */
#include <stdlib.h>
#include <assert.h>

#cpu x86

typedef int (*pifi)(int);
pifi multiplyCompile(int multiplyValue)
{
  insn *code= (insn *)calloc(1024, sizeof (insn));
  printf("Code generation for multiply value %d\n", multiplyValue);
  #[
	.org	code
     	push   %ebp
     	mov    %esp,%ebp
     	mov    0x8(%ebp),%eax
        imul   $(multiplyValue),%eax,%eax
     	pop    %ebp
     	ret    
  ]#;
  iflush (code, hpbcg_asm_pc);
  printf("Code generated\n");
  return (pifi)code;
}

int main(int argc, char *argv[])
{
  int i;
  pifi multiplyFunc; 

  if (argc < 2)
    {
      printf("%s [Multiply factor]\n", argv[0]);
      exit(0);
    }
  multiplyFunc = multiplyCompile(atoi(argv[1])); /* Generate code */
  for (i = 1; i < 11; ++i) printf("%3d ", i);
  printf("\n");
  for (i = 1; i < 11; ++i) printf("%3d ", multiplyFunc(i));
  printf("\n");
  return 0;
}
